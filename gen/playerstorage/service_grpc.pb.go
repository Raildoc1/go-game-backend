// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: playerstorage/service.proto

package playerstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerStorageService_AddUser_FullMethodName  = "/playerstorage.PlayerStorageService/AddUser"
	PlayerStorageService_FindUser_FullMethodName = "/playerstorage.PlayerStorageService/FindUser"
)

// PlayerStorageServiceClient is the client API for PlayerStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerStorageServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	FindUser(ctx context.Context, in *FindUserByLoginTokenRequest, opts ...grpc.CallOption) (*FindUserByLoginTokenResponse, error)
}

type playerStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerStorageServiceClient(cc grpc.ClientConnInterface) PlayerStorageServiceClient {
	return &playerStorageServiceClient{cc}
}

func (c *playerStorageServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, PlayerStorageService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerStorageServiceClient) FindUser(ctx context.Context, in *FindUserByLoginTokenRequest, opts ...grpc.CallOption) (*FindUserByLoginTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserByLoginTokenResponse)
	err := c.cc.Invoke(ctx, PlayerStorageService_FindUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerStorageServiceServer is the server API for PlayerStorageService service.
// All implementations must embed UnimplementedPlayerStorageServiceServer
// for forward compatibility.
type PlayerStorageServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	FindUser(context.Context, *FindUserByLoginTokenRequest) (*FindUserByLoginTokenResponse, error)
	mustEmbedUnimplementedPlayerStorageServiceServer()
}

// UnimplementedPlayerStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerStorageServiceServer struct{}

func (UnimplementedPlayerStorageServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedPlayerStorageServiceServer) FindUser(context.Context, *FindUserByLoginTokenRequest) (*FindUserByLoginTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedPlayerStorageServiceServer) mustEmbedUnimplementedPlayerStorageServiceServer() {}
func (UnimplementedPlayerStorageServiceServer) testEmbeddedByValue()                              {}

// UnsafePlayerStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerStorageServiceServer will
// result in compilation errors.
type UnsafePlayerStorageServiceServer interface {
	mustEmbedUnimplementedPlayerStorageServiceServer()
}

func RegisterPlayerStorageServiceServer(s grpc.ServiceRegistrar, srv PlayerStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayerStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerStorageService_ServiceDesc, srv)
}

func _PlayerStorageService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerStorageServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerStorageService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerStorageServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerStorageService_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByLoginTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerStorageServiceServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerStorageService_FindUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerStorageServiceServer).FindUser(ctx, req.(*FindUserByLoginTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerStorageService_ServiceDesc is the grpc.ServiceDesc for PlayerStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playerstorage.PlayerStorageService",
	HandlerType: (*PlayerStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _PlayerStorageService_AddUser_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _PlayerStorageService_FindUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playerstorage/service.proto",
}
