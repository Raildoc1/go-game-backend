// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
)

const addEvent = `-- name: AddEvent :exec
INSERT INTO outbox (topic, payload, created_at) VALUES ($1, $2, NOW())
`

type AddEventParams struct {
	Topic   string
	Payload []byte
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) error {
	_, err := q.db.Exec(ctx, addEvent, arg.Topic, arg.Payload)
	return err
}

const fetchEvents = `-- name: FetchEvents :many
SELECT id, topic, payload FROM outbox WHERE processed_at IS NULL ORDER BY id LIMIT $1
`

type FetchEventsRow struct {
	ID      int64
	Topic   string
	Payload []byte
}

func (q *Queries) FetchEvents(ctx context.Context, limit int32) ([]FetchEventsRow, error) {
	rows, err := q.db.Query(ctx, fetchEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchEventsRow
	for rows.Next() {
		var i FetchEventsRow
		if err := rows.Scan(&i.ID, &i.Topic, &i.Payload); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markProcessed = `-- name: MarkProcessed :exec
UPDATE outbox SET processed_at = NOW() WHERE id = $1
`

func (q *Queries) MarkProcessed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markProcessed, id)
	return err
}
